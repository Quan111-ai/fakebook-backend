const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema(
  {
    email: {
      type: String,
      required: [true, 'Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'],
      unique: true,
      trim: true,
      lowercase: true,
      match: [/^\S+@\S+\.\S+$/, 'Email kh√¥ng h·ª£p l·ªá']
    },
    password: {
      type: String,
      required: [true, 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'],
      minlength: [6, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±']
    },
    role: {
      type: String,
      enum: ['user', 'admin'],
      default: 'user'
    }
  },
  {
    timestamps: true 
  }
);

// M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o database
userSchema.pre('save', async function (next) {
  console.log("üìù Tr∆∞·ªõc khi l∆∞u user, m·∫≠t kh·∫©u hi·ªán t·∫°i:", this.password);

  if (!this.isModified('password')) {
    console.log("üîπ M·∫≠t kh·∫©u kh√¥ng ƒë·ªïi, kh√¥ng hash l·∫°i");
    return next();
  }

  // Ki·ªÉm tra n·∫øu ƒë√£ hash r·ªìi th√¨ kh√¥ng hash l·∫°i n·ªØa
  if (this.password.startsWith('$2b$')) {
    console.log("‚ö†Ô∏è M·∫≠t kh·∫©u ƒë√£ hash tr∆∞·ªõc ƒë√≥, b·ªè qua");
    return next();
  }

  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    console.log("‚úÖ M·∫≠t kh·∫©u sau khi hash:", this.password);
    next();
  } catch (error) {
    console.error("‚ùå L·ªói khi hash m·∫≠t kh·∫©u:", error);
    next(error);
  }
});




userSchema.methods.matchPassword = async function (enteredPassword) {
  console.log("üîë M·∫≠t kh·∫©u nh·∫≠p v√†o:", enteredPassword);
  console.log("üîí M·∫≠t kh·∫©u hash trong DB:", this.password);
  
  const result = await bcrypt.compare(enteredPassword, this.password);
  console.log("üîç K·∫øt qu·∫£ bcrypt.compare():", result);
  
  return result;
};



// ·∫®n m·∫≠t kh·∫©u khi tr·∫£ v·ªÅ JSON
userSchema.methods.toJSON = function () {
  const obj = this.toObject();
  delete obj.password;
  return obj;
};

module.exports = mongoose.model("User", userSchema, "user");
